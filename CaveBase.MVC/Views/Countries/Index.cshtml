@{
    ViewData["Title"] = "Countries - Overview";
}

<article id="app" class="row">
    <h1>{{ message }}</h1>
    <header class="col-md-4">
        <nav>
            <ul class="list-group">
                <li :class="getCountryClass(country)"
                    v-for="country in countries"
                    v-on:click="fetchCountryDetails(country)"
                    style="cursor:pointer">
                    <span class="countryName">{{ country.name }}</span>
                </li>
            </ul>
        </nav>
    </header>
    <div v-if="currentCountry" class="col-md-8">
        <h3>Details</h3>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label small">CountryName</label>
                <div class="col-sm-10">
                    <input id="countryName" type="text" class="form-control" v-model="currentCountry.name" :readonly="isReadOnly" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label small">CountryName</label>
                <div class="col-sm-10">
                    <input id="shortName" type="text" class="form-control" v-model="currentCountry.shortName" :readonly="isReadOnly" />
                </div>
            </div>
            <button id="sendButton" class="btn btn-primary" v-if="!isReadOnly" v-on:click="save() + sendOverSignalR()">Save</button>
            <button class="btn btn-default" v-if="!isReadOnly" v-on:click="cancel">Cancel</button>
            <button class="btn btn-primary" v-if="isReadOnly" v-on:click="toEditMode(true)">Edit</button>
            <button class="btn btn-warning" v-if="isReadOnly" v-on:click="toEditMode(false)">New</button>
            <button class="btn btn-danger" v-if="isReadOnly" v-on:click="deleteCountry()">Delete</button>
        </div>
    </div>
    @*<button id="sendButton" class="btn btn-primary">Save</button>*@
    <div class="row">
        <div class="col-sm-4 col-sm-offset-4"><ul id="messagesList"></ul></div>
    </div>
</article>

@section scripts{
    <script src="~/js/vue.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>

        var url = "https://localhost:44334/api/countries";
        var originalCountry = null;
        var app = new Vue({

            el: "#app",

            data: {
                message: "Loading countries ...",
                countries: null,
                currentCountry: null,
                isReadOnly: true,
                isEdit: false,
                connection: null
            },

            created: function () {
                var self = this;
                self.fetchCountries();
                self.SetUpSignalR();
            },

            methods: {

                sendOverSignalR: function () {
                    self = this;
                    let countryName = document.getElementById("countryName").value;
                    let shortName = document.getElementById("shortName").value;
                    let currentId = self.currentCountry.id;
                    let updateMessage = " - has been updated.";
                    var country = { name: countryName, shortName: shortName, id: currentId };
                    self.connection.invoke("UpdateCountry", country, originalCountry, updateMessage).catch(function (err) { return console.error(err.toString()); });
                },

                fetchCountries: function () {
                    self = this;
                    fetch(url)
                        .then(result => result.json())
                        .then(function (countries) {
                            countries.forEach(function (country, i) { country.isActive = false; });
                            self.countries = countries;
                            self.message = "Countries - overview";
                            if (self.countries.length > 0) { 
                                self.fetchCountryDetails(self.countries[0]); }
                        }).catch(error => console.error("Something went wrong while getting the countries: " + error));
                },

                fetchCountryDetails: function (country) {
                    self = this;
                    if (!self.isReadOnly) return;
                    fetch(`${url}/${country.id}`)
                        .then(result => result.json())
                        .then(function (result) {
                            //store a new cave object outside of the scope of Vue so we can reference back to the old values
                            //when we send the updated object over via SignalR.
                            originalCountry = { name: result.name, id: result.id, created: result.created, shortName: result.shortName };

                            self.currentCountry = result;
                            self.setActiveCountry(country.id);
                        });
                },

                setActiveCountry: function (countryid) {
                    self.countries.forEach(function (country, i) { country.isActive = country.id === countryid ? true : false; });
                },

                getCountryClass: function (country) {
                    if (country.isActive) return "list-group-item active";
                    return "list-group-item";
                },

                toEditMode: function (isEdit) {
                    self = this;
                    self.isReadOnly = false;
                    self.isEdit = isEdit;
                    if (!isEdit) {
                        self.currentCountry = {
                            "name": "",
                            "shortName": "",
                            "id": 0,
                            "created": ""
                        };
                    }
                },

                save: function () {
                    self = this; //
                    var ajaxHeaders = new Headers();
                    ajaxHeaders.append("Content-Type", "application/json");
                    var ajaxConfig = {
                        method: "PUT",
                        body: JSON.stringify(self.currentCountry),
                        headers: ajaxHeaders
                    };

                    if (self.isEdit) {
                        let putCountryRequest = new Request(`${url}/${self.currentCountry.id}`, ajaxConfig);
                        fetch(putCountryRequest)
                            .then(result => result.json())
                            .then(result => {
                                self.updateList(result);
                            }).catch(error => console.error("Someting went wrong during with the put request: " + error));
                    }
                    else {
                        ajaxConfig.method = "POST";
                        let postCountryRequest = new Request(`${url}`, ajaxConfig);
                        fetch(postCountryRequest)
                            .then(result => result.json())
                            .then(result => {
                                self.addToList(result);
                            }).catch(error => console.error("Someting went wrong during with the post request: " + error));
                    }

                    self.isEdit = false;
                    self.isReadOnly = true;
                },

                addToList: function (country) {
                    self.currentCountry.id = country.id;
                    self.countries.push(country);
                    self.fetchCountryDetails(self.countries[self.countries.length - 1]);
                },

                updateList: function (country) {
                    var updatedCountry = self.countries.filter(c => c.id === country.id)[0];
                    updatedCountry.name = country.name;
                },

                cancel: function (country) {
                    self = this;
                    self.isReadOnly = true;
                    self.isEdit = false;

                    if (self.isEdit) { self.fetchCountryDetails(self.currentCountry); }
                    else { self.fetchCountryDetails(self.countries[0]); }
                },

                deleteCountry: function () {
                    self = this;
                    fetch(`${url}/${self.currentCountry.id}`, { method: "DELETE" })
                        .then(result => result.json())
                        .then(function (result) {
                            self.countries.forEach(function (country, i) {
                                if (country.id === self.currentCountry.id) {
                                    self.countries.splice(i, 1);
                                    return;
                                }
                            });
                            if (self.countries.length > 0) { self.fetchCountryDetails(self.countries[0]); }
                        }).catch(error => console.error("Someting went wrong during with the delete request: " + error));
                },

                SetUpSignalR: function () {
                    self = this;
                    self.connection = new signalR.HubConnectionBuilder().withUrl("/CaveBaseHub").build();
                    self.connection.start().catch(function (err) {
                        return console.error(err.toString());
                    });
                }
            }
        });

    </script>
}